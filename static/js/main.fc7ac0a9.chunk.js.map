{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Cube","props","useState","isBig","setIsBig","isHovered","setIsHovered","ref","useRef","useFrame","current","rotation","x","y","useSpring","size","color","mesh","onClick","position-x","onPointerOver","onPointerOut","scale","receiveShadow","castShadow","attach","args","Math","PI","roughness","metalness","emissive","shininess","Plane","position","Scene","positionX","useControl","type","max","min","default","intensity","App","shadowMap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAOMA,G,OAAO,SAACC,GAAW,IAAD,EACIC,oBAAS,GADb,mBACfC,EADe,KACRC,EADQ,OAEYF,oBAAS,GAFrB,mBAEfG,EAFe,KAEJC,EAFI,KAGhBC,EAAMC,mBAEZC,aAAS,WACPF,EAAIG,QAAQC,SAASC,GAAK,IAC1BL,EAAIG,QAAQC,SAASE,GAAK,OAPN,MAUFC,YAAU,CAC5BC,KAAMZ,EAAQ,CAAC,EAAG,EAAG,GAAK,CAAC,EAAG,EAAG,GACjCS,EAAGT,EAAQ,EAAI,IAFTY,EAVc,EAUdA,KAAMH,EAVQ,EAURA,EAKRI,EAAQX,EAAY,UAAY,SAEtC,OACE,kBAAC,IAAEY,KAAH,iBACMhB,EADN,CAEEM,IAAKA,EACLW,QAAS,kBAAMd,GAAUD,IACzBgB,aAAYP,EACZQ,cAAe,kBAAMd,GAAa,IAClCe,aAAc,kBAAMf,GAAa,IACjCgB,MAAOP,EACPQ,eAAe,EACfC,YAAY,IAEZ,yCACEC,OAAO,WACPC,KAAM,CAAC,EAAG,GAAK,GAAI,GAAc,EAAVC,KAAKC,MAE9B,uCACEH,OAAO,WACPI,UAAW,EACXC,UAAW,EACXd,MAAOA,EACPe,SAAU,GACVC,UAAW,SAQbC,EAAQ,WACZ,OACE,0BACEV,eAAe,EACfZ,SAAU,EAAEgB,KAAKC,GAAK,EAAG,EAAG,GAC5BM,SAAU,CAAC,GAAI,EAAG,IAElB,mCAAeT,OAAO,WAAWC,KAAM,CAAC,GAAI,MAC5C,uCAAmBD,OAAO,WAAWT,MAAM,cAK3CmB,EAAQ,WACZ,IAAMC,EAAYC,YAAW,aAAc,CACzCC,KAAM,SACNC,IAAK,GACLC,KAAM,KAGFxB,EAAQqB,YAAW,QAAS,CAChCC,KAAM,QACNG,QAAS,cAGX,OACE,oCACE,uCACA,gCAAYC,UAAW,GAAKR,SAAU,CAAC,EAAG,EAAG,GAAIV,YAAY,IAE7D,kBAAC,EAAD,CAAMU,SAAU,CAACE,EAAW,EAAG,GAAIzB,SAAU,CAAC,GAAI,GAAI,KACtD,kBAAC,EAAD,CAAMuB,SAAU,CAAC,EAAG,EAAG,GAAIvB,SAAU,CAAC,GAAI,GAAI,MAC9C,kBAAC,IAAD,CACEuB,SAAU,EAAE,EAAG,EAAG,GAClBvB,SAAU,CAAC,EAAG,EAAG,GACjBY,eAAe,EACfC,YAAY,EACZE,KAAM,CAAC,EAAG,EAAG,IAEb,uCACED,OAAO,WACPI,UAAW,EACXC,UAAW,EACXd,MAAOA,EACPgB,UAAW,OAIf,kBAAC,EAAD,MACA,kBAAC,IAAD,QAgBSW,MAXf,WACE,OACE,oCACE,kBAAC,IAAD,CAAQC,WAAW,GACjB,kBAAC,EAAD,OAEF,kBAAC,IAAD,QCtGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc7ac0a9.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport { OrbitControls, Box } from \"drei\";\nimport { a, useSpring } from \"react-spring/three\";\nimport { Controls, useControl } from \"react-three-gui\";\nimport \"./App.css\";\n\nconst Cube = (props) => {\n  const [isBig, setIsBig] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const ref = useRef();\n\n  useFrame(() => {\n    ref.current.rotation.x += 0.01;\n    ref.current.rotation.y += 0.01;\n  });\n\n  const { size, x } = useSpring({\n    size: isBig ? [2, 2, 2] : [1, 1, 1],\n    x: isBig ? 2 : 0,\n  });\n\n  const color = isHovered ? \"#F9C231\" : \"tomato\";\n\n  return (\n    <a.mesh\n      {...props}\n      ref={ref}\n      onClick={() => setIsBig(!isBig)}\n      position-x={x}\n      onPointerOver={() => setIsHovered(true)}\n      onPointerOut={() => setIsHovered(false)}\n      scale={size}\n      receiveShadow={true}\n      castShadow={true}\n    >\n      <torusBufferGeometry\n        attach='geometry'\n        args={[1, 0.4, 40, 60, Math.PI * 2]}\n      />\n      <meshPhongMaterial\n        attach='material'\n        roughness={0}\n        metalness={1}\n        color={color}\n        emissive={0.3}\n        shininess={200}\n        // clearcoat={1}\n      />\n    </a.mesh>\n  );\n};\n// args = [width, height, depth]\n\nconst Plane = () => {\n  return (\n    <mesh\n      receiveShadow={true}\n      rotation={[-Math.PI / 2, 0, 0]}\n      position={[0, -3, 0]}\n    >\n      <planeGeometry attach='geometry' args={[50, 50]} />\n      <meshPhongMaterial attach='material' color='skyblue' />\n    </mesh>\n  );\n};\n\nconst Scene = () => {\n  const positionX = useControl(\"Position X\", {\n    type: \"number\",\n    max: 10,\n    min: -10,\n  });\n\n  const color = useControl(\"Color\", {\n    type: \"color\",\n    default: \"lightblue\",\n  });\n\n  return (\n    <>\n      <ambientLight />\n      <pointLight intensity={0.6} position={[0, 6, 3]} castShadow={true} />\n      {/* <pointLight intensity={0.1} position={[10, -10, 10]} /> */}\n      <Cube position={[positionX, 3, 0]} rotation={[10, 20, 0]} />\n      <Cube position={[0, 0, 0]} rotation={[10, 30, 10]} />\n      <Box\n        position={[-3, 2, 0]}\n        rotation={[0, 0, 0]}\n        receiveShadow={true}\n        castShadow={true}\n        args={[1, 1, 1]}\n      >\n        <meshPhongMaterial\n          attach='material'\n          roughness={0}\n          metalness={1}\n          color={color}\n          shininess={200}\n          // clearcoat={1}\n        />\n      </Box>\n      <Plane />\n      <OrbitControls />\n    </>\n  );\n};\n\nfunction App() {\n  return (\n    <>\n      <Canvas shadowMap={true}>\n        <Scene />\n      </Canvas>\n      <Controls />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}